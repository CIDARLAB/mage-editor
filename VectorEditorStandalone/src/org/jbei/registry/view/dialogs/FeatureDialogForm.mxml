<?xml version="1.0" encoding="utf-8"?>
<AbstractDialogForm creationComplete="onCreationComplete()" xmlns="org.jbei.lib.ui.dialogs.*" xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%">
	<mx:Script>
		<![CDATA[
            import mx.collections.ArrayCollection;
            import mx.events.ValidationResultEvent;
            
            import org.jbei.bio.sequence.common.StrandType;
            import org.jbei.bio.sequence.dna.Feature;
            import org.jbei.bio.sequence.dna.FeatureNote;
            import org.jbei.registry.ApplicationFacade;
			
			[Bindable]
			private var featureTypes:ArrayCollection = new ArrayCollection(
				[{"label" : "-10_signal", "data" : "-10_signal"}, 
				{"label" : "-35_signal", "data" : "-35_signal"}, 
				{"label" : "3'UTR", "data" : "3'UTR"}, 
				{"label" : "5'UTR", "data" : "5'UTR"}, 
				{"label" : "attenuator", "data" : "attenuator"}, 
				{"label" : "C_region", "data" : "C_region"}, 
				{"label" : "CAAT_signal", "data" : "CAAT_signal"}, 
				{"label" : "CDS", "data" : "CDS"}, 
				{"label" : "conflict", "data" : "conflict"}, 
				{"label" : "D_segment", "data" : "D_segment"}, 
				{"label" : "D-loop", "data" : "D-loop"}, 
				{"label" : "enhancer", "data" : "enhancer"}, 
				{"label" : "exon", "data" : "exon"}, 
				{"label" : "gap", "data" : "gap"}, 
				{"label" : "GC_signal", "data" : "GC_signal"}, 
				{"label" : "gene", "data" : "gene"}, 
				{"label" : "iDNA", "data" : "iDNA"}, 
				{"label" : "intron", "data" : "intron"}, 
				{"label" : "J_segment ", "data" : "J_segment "}, 
				{"label" : "LTR", "data" : "LTR"}, 
				{"label" : "mat_peptide", "data" : "mat_peptide"}, 
				{"label" : "misc_binding", "data" : "misc_binding"}, 
				{"label" : "misc_difference", "data" : "misc_difference"}, 
				{"label" : "misc_feature", "data" : "misc_feature"}, 
				{"label" : "misc_recomb", "data" : "misc_recomb"}, 
				{"label" : "misc_RNA", "data" : "misc_RNA"}, 
				{"label" : "misc_signal", "data" : "misc_signal"}, 
				{"label" : "misc_structure", "data" : "misc_structure"}, 
				{"label" : "modified_base", "data" : "modified_base"}, 
				{"label" : "mRNA", "data" : "mRNA"}, 
				{"label" : "N_region", "data" : "N_region"}, 
				{"label" : "ncRNA", "data" : "ncRNA"}, 
				{"label" : "old_sequence", "data" : "old_sequence"}, 
				{"label" : "operon", "data" : "operon"}, 
				{"label" : "oriT", "data" : "oriT"}, 
				{"label" : "polyA_signal", "data" : "polyA_signal"}, 
				{"label" : "polyA_site", "data" : "polyA_site"}, 
				{"label" : "precursor_RNA", "data" : "precursor_RNA"}, 
				{"label" : "prim_transcript", "data" : "prim_transcript"}, 
				{"label" : "primer_bind", "data" : "primer_bind"}, 
				{"label" : "promoter", "data" : "promoter"}, 
				{"label" : "protein_bind", "data" : "protein_bind"}, 
				{"label" : "RBS", "data" : "RBS"}, 
				{"label" : "rep_origin", "data" : "rep_origin"}, 
				{"label" : "repeat_region", "data" : "repeat_region"}, 
				{"label" : "rRNA", "data" : "rRNA"}, 
				{"label" : "S_region", "data" : "S_region"}, 
				{"label" : "sig_peptide", "data" : "sig_peptide"}, 
				{"label" : "source", "data" : "source"}, 
				{"label" : "stem_loop", "data" : "stem_loop"}, 
				{"label" : "STS", "data" : "STS"}, 
				{"label" : "TATA_signal", "data" : "TATA_signal"}, 
				{"label" : "terminator", "data" : "terminator"}, 
				{"label" : "tmRNA", "data" : "tmRNA"}, 
				{"label" : "transit_peptide", "data" : "transit_peptide"}, 
				{"label" : "tRNA", "data" : "tRNA"}, 
				{"label" : "unsure", "data" : "unsure"}, 
				{"label" : "V_region ", "data" : "V_region "}, 
				{"label" : "V_segment", "data" : "V_segment"}, 
				{"label" : "variation", "data" : "variation"}]
			);
			
			[Bindable]
			private var sequenceLength:int = ApplicationFacade.getInstance().sequenceProvider.sequence.length;
			
			// Public Methods
			public override function validate():void
			{
				if(sequenceLength == 0 || genbankStartNumberValidator.validate().type == ValidationResultEvent.INVALID || endNumberValidator.validate().type == ValidationResultEvent.INVALID || nameStringValidator.validate().type == ValidationResultEvent.INVALID) {
					isValid = false;
				} else {
					if(!dataObject || !ApplicationFacade.getInstance().sequenceProvider.hasFeature(dataObject as Feature)) { // "New Feature" or "Selected as New Feature" cases
						createFeature();
					} else { // "Edit Feature" case
						updateFeature(dataObject as Feature);
					}
					
					isValid = true;
				}
			}
			
			// Event Handlers
			private function onCreationComplete():void
			{
				for(var i:int = 0; i < featureTypes.length; i++) {
					if(featureTypes[i]["data"] == "misc_feature") {
						typeComboBox.selectedIndex = i;
						break; 
					}
				}
				
				nameTextInput.setFocus();
				
				if(dataObject && dataObject is Feature) {
					populateControls(dataObject as Feature);
				}
			}
			
			// Private Methods
			private function populateControls(feature:Feature):void
			{
				nameTextInput.text = feature.name;
				
				if(feature.strand == StrandType.FORWARD) {
					positiveRadioButton.selected = true;
				} else if(feature.strand == StrandType.BACKWARD) {
					negativeRadioButton.selected = true;
				}
				
				for(var i:int = 0; i < featureTypes.length; i++) {
					if(featureTypes[i].label == feature.type) {
						typeComboBox.selectedIndex = i;
						break;
					}
				}
				
				genbankStartNumericStepper.value = feature.start + 1;
				endNumericStepper.value = feature.end;
				
				/*for(var j:int = 0; j < feature.notes.length; j++) {
					if((feature.notes[j] as FeatureNote).name.toLowerCase() == "description") {
						descriptionTextArea.text = (feature.notes[j] as FeatureNote).value;
						break;
					}
				}*/
			}
			
			private function createFeature():void
			{
				var feature:Feature = new Feature();
				
				feature.strand = strandRadioGroup.selectedValue as int;
				feature.type = typeComboBox.text;
				feature.start = genbankStartNumericStepper.value - 1;
				feature.end = endNumericStepper.value - 1;
				feature.name = nameTextInput.text;
				
				feature.notes = new Vector.<FeatureNote>();
				/*if(descriptionTextArea.text != "") {
					feature.notes.push(new FeatureNote("description", descriptionTextArea.text));
				}*/
				
				ApplicationFacade.getInstance().sequenceProvider.addFeature(feature);
			}
			
			private function updateFeature(feature:Feature):void
			{
				try {
					ApplicationFacade.getInstance().sequenceProvider.manualUpdateStart();
					
					feature.strand = strandRadioGroup.selectedValue as int;
					feature.type = typeComboBox.text;
					feature.start = genbankStartNumericStepper.value - 1;
					feature.end = endNumericStepper.value - 1;
					feature.name = nameTextInput.text;
					
					if(!feature.notes) {
						feature.notes = new Vector.<FeatureNote>();
					}
					
					var labelNoteIndex:int = -1;
					var descriptionNoteIndex:int = -1;
					for(var j:int = 0; j < feature.notes.length; j++) {
						if((feature.notes[j] as FeatureNote).name.toLowerCase() == "label") {
							labelNoteIndex = j;
						}
						
						if((feature.notes[j] as FeatureNote).name.toLowerCase() == "description") {
							descriptionNoteIndex = j;
						}
					}
					
					if(labelNoteIndex >= 0) {
						(feature.notes[labelNoteIndex] as FeatureNote).value = nameTextInput.text;
					} else {
						feature.notes.push(new FeatureNote("name", nameTextInput.text));
					}
					
					if(descriptionNoteIndex >= 0) {
						(feature.notes[descriptionNoteIndex] as FeatureNote).value = descriptionTextArea.text;
					} else {
						feature.notes.push(new FeatureNote("description", descriptionTextArea.text));
					}
				} finally {
					ApplicationFacade.getInstance().sequenceProvider.manualUpdateEnd();
				}
			}
		]]>
	</mx:Script>
	
	<mx:NumberValidator id="genbankStartNumberValidator" source="{ genbankStartNumericStepper }" required="true" minValue="1" property="value" domain="int"/>
	<mx:NumberValidator id="endNumberValidator" source="{ endNumericStepper }" required="true" minValue="1" property="value" domain="int" />
	<mx:StringValidator id="nameStringValidator" source="{ nameTextInput }" required="true" property="text" />
	
	<mx:Form id="mainForm" paddingBottom="5" paddingTop="5" paddingLeft="5" paddingRight="5">
		<mx:FormItem label="Name:" direction="horizontal"><mx:TextInput id="nameTextInput" /></mx:FormItem>
		<mx:FormItem label="Strand:" direction="horizontal">
			<mx:RadioButtonGroup id="strandRadioGroup" />
			
			<mx:RadioButton groupName="strandRadioGroup" id="positiveRadioButton" value="{ StrandType.FORWARD }" label="Positive" selected="true" />
			<mx:RadioButton groupName="strandRadioGroup" id="negativeRadioButton" value="{ StrandType.BACKWARD }" label="Negative" />
		</mx:FormItem>
		<mx:FormItem label="Type:" direction="horizontal">
			<mx:ComboBox id="typeComboBox" dataProvider="{ featureTypes }" labelField="label"/>
		</mx:FormItem>
		<mx:FormItem label="Start:" direction="horizontal">
			<mx:NumericStepper id="genbankStartNumericStepper" minimum="1" maximum="{ sequenceLength }"/>
		</mx:FormItem>
		<mx:FormItem label="End:" direction="horizontal">
			<mx:NumericStepper id="endNumericStepper" minimum="1" maximum="{ sequenceLength + 1 }"/>
		</mx:FormItem>
		<mx:FormItem label="Description:" direction="horizontal">
			<mx:TextArea id="descriptionTextArea" />
		</mx:FormItem>
	</mx:Form>
</AbstractDialogForm>
