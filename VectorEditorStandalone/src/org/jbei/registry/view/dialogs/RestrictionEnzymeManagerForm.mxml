<?xml version="1.0" encoding="utf-8"?>
<AbstractDialogForm 
	creationComplete="onCreationComplete(event)"
	width="100%"
	height="100%"
	xmlns="org.jbei.lib.ui.dialogs.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml">
	
	<mx:Script>
		<![CDATA[
            import mx.collections.ArrayCollection;
            import mx.collections.Sort;
            import mx.collections.SortField;
            import mx.controls.Alert;
            
            import org.jbei.bio.enzymes.RestrictionEnzyme;
            import org.jbei.lib.data.RestrictionEnzymeGroup;
            import org.jbei.lib.ui.dialogs.ModalDialog;
            import org.jbei.lib.ui.dialogs.ModalDialogEvent;
            import org.jbei.registry.ApplicationFacade;
            import org.jbei.registry.control.RestrictionEnzymeGroupManager;
            import org.jbei.registry.models.UserRestrictionEnzymeGroup;
            import org.jbei.registry.models.UserRestrictionEnzymes;
			
			/*import org.jbei.lib.ui.dialogs.ModalDialog;
			import org.jbei.lib.ui.dialogs.ModalDialogEvent;*/
			
			[Bindable]
			private var systemREGroups:ArrayCollection = new ArrayCollection(); /* of RestrictionEnzymeGroup */
			
			[Bindable]
			private var currentSystemRE:ArrayCollection = new ArrayCollection(); /* of RestrictionEnzyme */
			
			[Bindable]
			private var userGroup:ArrayCollection = new ArrayCollection(); /* of RestrictionEnzyme */
			
			[Bindable]
			private var userGroups:ArrayCollection = new ArrayCollection(); /* of RestrictionEnzymeGroup */
			
			[Bindable]
			private var currentUserGroup:ArrayCollection = new ArrayCollection(); /* of RestrictionEnzyme */
			
			[Bindable]
			private var activeEnzymes:ArrayCollection = new ArrayCollection(); /* of RestrictionEnzyme */
			
			// Public Methods
			public override function validate():void
			{
				isValid = true;
				
				var userRestrictionEnzymes:UserRestrictionEnzymes = new UserRestrictionEnzymes();
				
				if(userGroups && userGroups.length > 0) {
					for(var i:int = 0; i < userGroups.length; i++) {
						var userGroup:RestrictionEnzymeGroup = userGroups.getItemAt(i) as RestrictionEnzymeGroup;
						
						if(!userGroup) {
							continue;
						}
						
						var enzymeNames:ArrayCollection = new ArrayCollection() /* of String */;
						for(var i1:int = 0; i1 < userGroup.enzymes.length; i1++) {
							enzymeNames.addItem((userGroup.enzymes[i1] as RestrictionEnzyme).name);
						}
						
						var userRestrictionEnzymeGroup:UserRestrictionEnzymeGroup = new UserRestrictionEnzymeGroup(userGroup.name, enzymeNames);
						userRestrictionEnzymes.groups.addItem(userRestrictionEnzymeGroup);
					}
				}
				
				userRestrictionEnzymes.activeEnzymeNames.removeAll();
				if(activeEnzymes && activeEnzymes.length > 0) {
					var activeEnzymeNames:ArrayCollection = new ArrayCollection() /* of String */;
					
					for(var j:int = 0; j < activeEnzymes.length; j++) {
						var activeEnzyme:RestrictionEnzyme = activeEnzymes.getItemAt(j) as RestrictionEnzyme;
						
						if(!activeEnzyme) {
							continue;
						}
						
						userRestrictionEnzymes.activeEnzymeNames.addItem(activeEnzyme.name);
					}
				}
				
                ApplicationFacade.getInstance().saveUserRestrictionEnzymes(userRestrictionEnzymes);
                
                var restrictionEnzymeGroup:RestrictionEnzymeGroup = new RestrictionEnzymeGroup();
                                
                var activeEnzymesGroup:ArrayCollection = activeEnzymes;
                RestrictionEnzymeGroupManager.instance.activeGroup = activeEnzymes

                for(var k:int = 0; k < activeEnzymesGroup.length; k++) {
                    restrictionEnzymeGroup.addRestrictionEnzyme(activeEnzymesGroup.getItemAt(k) as RestrictionEnzyme);
                }
                
                ApplicationFacade.getInstance().restrictionEnzymeMapper.restrictionEnzymeGroup = restrictionEnzymeGroup;
                
			}
			
			// Event Handlers
			private function onCreationComplete(event:Event):void
			{
				for(var i:int = 0; i < RestrictionEnzymeGroupManager.instance.systemGroups.length; i++) {
					systemREGroups.addItem(RestrictionEnzymeGroupManager.instance.systemGroups[i]);
				}
				
				updateCurrentSystemGroup();
				
				if((RestrictionEnzymeGroupManager.instance.userGroups == null
					|| RestrictionEnzymeGroupManager.instance.userGroups.length == 0)
					&& (RestrictionEnzymeGroupManager.instance.activeGroup == null
						|| RestrictionEnzymeGroupManager.instance.activeGroup.length == 0)) { // if user never saved enzymes then load common group
					for(var z:int = 0; z < (RestrictionEnzymeGroupManager.instance.systemGroups.getItemAt(0) as RestrictionEnzymeGroup).enzymes.length; z++) {
						activeEnzymes.addItem((RestrictionEnzymeGroupManager.instance.systemGroups.getItemAt(0) as RestrictionEnzymeGroup).enzymes[z] as RestrictionEnzyme);
					}
				} else {
					for(var j:int = 0; j < RestrictionEnzymeGroupManager.instance.activeGroup.length; j++) {
						activeEnzymes.addItem(RestrictionEnzymeGroupManager.instance.activeGroup[j]);
					}
				}
				
				sortEnzymes(activeEnzymes);
				
				for(var k:int = 0; k < RestrictionEnzymeGroupManager.instance.userGroups.length; k++) {
					userGroups.addItem(RestrictionEnzymeGroupManager.instance.userGroups[k]);
				}
				
				updateCurrentUserGroup();
				
				sortEnzymes(currentUserGroup);
			}
			
			private function onSystemREGroupsChange(event:Event):void
			{
				if(systemREGroupsComboBox.selectedItem && systemREGroupsComboBox.selectedItem is RestrictionEnzymeGroup) {
					updateCurrentSystemGroup();
				}
			}
			
			private function onSystemRESearchTextInputFocusIn(event:Event):void
			{
				if(systemRESearchTextInput.text == "Enzyme name") {
					systemRESearchTextInput.text = "";
					systemRESearchTextInput.setStyle("color", "#000000");
				}
			}
			
			private function onSystemRESearchTextInputFocusOut(event:Event):void
			{
				if(systemRESearchTextInput.text == "") {
					systemRESearchTextInput.text = "Enzyme name";
					systemRESearchTextInput.setStyle("color", "#808080");
				}
			}
			
			private function onSystemRESearchTextInputChange(event:Event):void
			{
				updateCurrentSystemGroup();
			}
			
			private function onNewGroupButton(event:MouseEvent):void
			{
				var reGroup:RestrictionEnzymeGroup = new RestrictionEnzymeGroup("tmpGroup");
				
				var reNewGroupDialog:ModalDialog = new ModalDialog(RestrictionEnzymeNewGroupForm, reGroup);
				reNewGroupDialog.title = "Create New Group";
				reNewGroupDialog.open();
				
				reNewGroupDialog.addEventListener(ModalDialogEvent.SUBMIT, onRestrictionEnzymeNewGroupSubmit);
			}
			
			private function onRestrictionEnzymeNewGroupSubmit(event:ModalDialogEvent):void
			{
				var newREGroup:RestrictionEnzymeGroup = event.data as RestrictionEnzymeGroup;
				
				for(var i:int = 0; i < userGroup.length; i++) {
					newREGroup.addRestrictionEnzyme(userGroup.getItemAt(i) as RestrictionEnzyme);
				}
				
				RestrictionEnzymeGroupManager.instance.userGroups.addItem(newREGroup);
				
				updateUserGroups();
				
				userGroupsComboBox.selectedIndex = userGroups.length - 1;
				
				updateCurrentUserGroup();
			}
			
			private function onAddSelectedToGroupButtonClick(event:MouseEvent):void
			{
				if(!userGroupsComboBox.selectedItem) {
					Alert.show("Create group first");
					return;
				}
				
				if(systemREList.selectedItems.length == 0 || !userGroupsComboBox.selectedItem) { return; }
				
				var currentRestrictionEnzymesGroup:RestrictionEnzymeGroup = userGroupsComboBox.selectedItem as RestrictionEnzymeGroup;
				
				for(var i:int = 0; i < systemREList.selectedItems.length; i++) {
					if(!currentRestrictionEnzymesGroup.hasEnzyme(systemREList.selectedItems[i] as RestrictionEnzyme)) {
						currentRestrictionEnzymesGroup.addRestrictionEnzyme(systemREList.selectedItems[i] as RestrictionEnzyme);
					}
				}
				
				updateCurrentUserGroup();
				
				sortEnzymes(currentUserGroup);
			}
			
			private function onAddAllToGroupButtonClick(event:MouseEvent):void
			{
				if(!userGroupsComboBox.selectedItem) {
					Alert.show("Create or Select group first");
					return;
				}
				
				if(!userGroupsComboBox.selectedItem) { return; }
				
				var currentRestrictionEnzymesGroup:RestrictionEnzymeGroup = userGroupsComboBox.selectedItem as RestrictionEnzymeGroup;
				
				for(var i:int = 0; i < currentSystemRE.length; i++) {
					if(!currentRestrictionEnzymesGroup.hasEnzyme(currentSystemRE[i] as RestrictionEnzyme)) {
						currentRestrictionEnzymesGroup.addRestrictionEnzyme(currentSystemRE[i] as RestrictionEnzyme);
					}
				}
				
				updateCurrentUserGroup();
				
				sortEnzymes(currentUserGroup);
			}
			
			private function onAddSelectedToActiveButtonClick(event:MouseEvent):void
			{
				if(systemREList.selectedItems.length == 0) { return; }
                
				for(var i:int = 0; i < systemREList.selectedItems.length; i++) {
					if(activeEnzymes.getItemIndex(systemREList.selectedItems[i] as RestrictionEnzyme) == -1) {
						activeEnzymes.addItem(systemREList.selectedItems[i] as RestrictionEnzyme);
					}
				}
				
				sortEnzymes(activeEnzymes);
			}
			
			private function onAddAllToActiveButtonClick(event:MouseEvent):void
			{
				for(var i:int = 0; i < currentSystemRE.length; i++) {
					if(activeEnzymes.getItemIndex(currentSystemRE[i] as RestrictionEnzyme) == -1) {
						activeEnzymes.addItem(currentSystemRE[i] as RestrictionEnzyme);
					}
				}
				
				sortEnzymes(activeEnzymes);
			}
			
			private function onUserGroupsComboBoxChange(event:Event):void
			{
				updateCurrentUserGroup();
			}
			
			private function onRemoveGroupButtonClick(event:MouseEvent):void
			{
				if(userGroupsComboBox.selectedIndex == -1) { return; }
				
				var currentRestrictionEnzymesGroup:RestrictionEnzymeGroup = userGroupsComboBox.selectedItem as RestrictionEnzymeGroup;
				
				RestrictionEnzymeGroupManager.instance.removeGroup(currentRestrictionEnzymesGroup);    
				
				updateUserGroups();
				
				if(userGroupsComboBox.selectedIndex >= 0) {
					updateCurrentUserGroup();
				} else {
					currentUserGroup.removeAll();
				}
			}
			
			private function onRemoveSelectedEnzymesFromGroupButtonClick(event:MouseEvent):void
			{
				if(currentUserGroupList.selectedItems.length == 0) { return; }
				
				var currentRestrictionEnzymesGroup:RestrictionEnzymeGroup = userGroupsComboBox.selectedItem as RestrictionEnzymeGroup;
				
				for(var i:int = 0; i < currentUserGroupList.selectedItems.length; i++) {
					currentRestrictionEnzymesGroup.removeRestrictionEnzyme(currentUserGroupList.selectedItems[i] as RestrictionEnzyme);
				}
				
				updateCurrentUserGroup();
				
                currentRestrictionEnzymesGroup.enzymes.sort(sortEnzymes2);
			}
			
			private function onMakeActiveGroupButtonClick(event:MouseEvent):void
			{
				if(userGroupsComboBox.selectedIndex == -1) { return; }
				
				var currentUserGroup:RestrictionEnzymeGroup = userGroupsComboBox.selectedItem as RestrictionEnzymeGroup;
				
				activeEnzymes.removeAll();
				
				for(var i:int = 0; i < currentUserGroup.enzymes.length; i++) {
					activeEnzymes.addItem(currentUserGroup.enzymes[i]);
				}
			}
			
			private function onRemoveSelectedEnzymesFromActiveGroupButtonClick(event:MouseEvent):void
			{
				if(activeEnzymesList.selectedItems.length == 0) { return; }
				while(activeEnzymesList.selectedItems.length > 0) {
					activeEnzymes.removeItemAt(activeEnzymes.getItemIndex(activeEnzymesList.selectedItems[0] as RestrictionEnzyme));
				}
				sortEnzymes(activeEnzymes);
			}
			
			private function onSaveAsGroupButtonClick(event:MouseEvent):void
			{
				var reGroup:RestrictionEnzymeGroup = new RestrictionEnzymeGroup("tmpGroup");
				
				var reNewGroupDialog:ModalDialog = new ModalDialog(RestrictionEnzymeNewGroupForm, reGroup);
				reNewGroupDialog.title = "Create New Group";
				reNewGroupDialog.open();
				
				for(var i:int = 0; i < activeEnzymes.length; i++) {
					reGroup.addRestrictionEnzyme(activeEnzymes[i] as RestrictionEnzyme);
				}
				
				reNewGroupDialog.addEventListener(ModalDialogEvent.SUBMIT, onRestrictionEnzymeNewGroupSubmit);
			}
			
			// Private Methods
			private function updateCurrentSystemGroup():void
			{
				currentSystemRE.removeAll();
				
				var currentRestrictionEnzymesGroup:RestrictionEnzymeGroup = systemREGroupsComboBox.selectedItem as RestrictionEnzymeGroup;
				
				var filteredEnzymes:ArrayCollection = new ArrayCollection();
				
				if(systemRESearchTextInput.text == "" || systemRESearchTextInput.text == "Enzyme name") {
					for(var i:int = 0; i < currentRestrictionEnzymesGroup.enzymes.length; i++) {
						filteredEnzymes.addItem(currentRestrictionEnzymesGroup.enzymes[i]);
					}
				} else {
					var searchPhrase:String = systemRESearchTextInput.text.toLowerCase();
					
					for(var j:int = 0; j < currentRestrictionEnzymesGroup.enzymes.length; j++) {
						if((currentRestrictionEnzymesGroup.enzymes[j] as RestrictionEnzyme).name.toLowerCase().search(searchPhrase) >= 0) {
							filteredEnzymes.addItem(currentRestrictionEnzymesGroup.enzymes[j]);
						}
					}
				}
				
				for(var l:int = 0; l < filteredEnzymes.length; l++) {
					currentSystemRE.addItem(filteredEnzymes[l]);
				}
				
				sortEnzymes(currentSystemRE);
			}
			
			private function updateUserGroups():void
			{
				userGroups.removeAll();
				
				for(var i:int = 0; i < RestrictionEnzymeGroupManager.instance.userGroups.length; i++) {
					userGroups.addItem(RestrictionEnzymeGroupManager.instance.userGroups[i]);
				}
			}
			
			private function updateCurrentUserGroup():void
			{
				currentUserGroup.removeAll();
				
				if(! userGroupsComboBox.selectedItem) { return; }
				
				var currentRestrictionEnzymesGroup:RestrictionEnzymeGroup = userGroupsComboBox.selectedItem as RestrictionEnzymeGroup;
				
				for(var i:int = 0; i < currentRestrictionEnzymesGroup.enzymes.length; i++) {
					currentUserGroup.addItem(currentRestrictionEnzymesGroup.enzymes[i])
				}
			}
			
			private function sortEnzymes(collection:ArrayCollection):void
			{
				var sortField:SortField = new SortField();
				sortField.name = "name";
				
				var sort:Sort = new Sort();
				sort.fields = [sortField];
				
				collection.sort = sort;
				collection.refresh();
			}
            
            private function sortEnzymes2(a:RestrictionEnzyme, b:RestrictionEnzyme):int
            {
                if(a.name > b.name) {
                    return 1;
                } else if(a.name < b.name) {
                    return -1;
                } else {
                    return 0;
                }
            }
		]]>
	</mx:Script>
	
	<mx:VBox width="100%" height="100%">
		<mx:HBox height="100%">
			<mx:VBox height="100%" verticalGap="3">
				<mx:Label text="Enzymes:"/>
				<mx:ComboBox id="systemREGroupsComboBox" dataProvider="{ systemREGroups }" labelField="name" change="onSystemREGroupsChange(event)" />
				<mx:TextInput id="systemRESearchTextInput" text="Enzyme name" color="#808080" change="onSystemRESearchTextInputChange(event)" focusIn="onSystemRESearchTextInputFocusIn(event)" focusOut="onSystemRESearchTextInputFocusOut(event)" />
				<mx:List id="systemREList" dataProvider="{ currentSystemRE }" labelField="name" allowMultipleSelection="true" width="100%" height="100%"/>
			</mx:VBox>
			<mx:VBox height="100%" verticalGap="0">
				<mx:HBox height="50%">
					<mx:VBox verticalAlign="middle" height="100%">
						<mx:Button id="addSelectedToGroupButton" label="&gt;" width="50" click="onAddSelectedToGroupButtonClick(event)"/>
						<mx:Button id="addAllToGroupButton" label="&gt;&gt;" width="50" click="onAddAllToGroupButtonClick(event)"/>
					</mx:VBox>
					<mx:VBox height="100%" verticalGap="3">
						<mx:Label text="Groups:" />
						<mx:ComboBox id="userGroupsComboBox" dataProvider="{ userGroups }" labelField="name" change="onUserGroupsComboBoxChange(event)"/>
						<mx:HBox height="100%">
							<mx:List id="currentUserGroupList" dataProvider="{ currentUserGroup }" labelField="name" allowMultipleSelection="true" height="100%"/>
							<mx:VBox verticalAlign="middle" height="100%">
								<mx:Button id="newGroupButton" label="New Group" width="120" click="onNewGroupButton(event)"/>
								<mx:Button id="removeGroupButton" label="Remove Group" width="120" click="onRemoveGroupButtonClick(event)"/>
								<mx:Button id="removeSelectedEnzymesFromGroupButton" label="Remove Enzyme" width="120" click="onRemoveSelectedEnzymesFromGroupButtonClick(event)"/>
								<mx:Button id="makeActiveGroupButton" label="Make Active" width="120" click="onMakeActiveGroupButtonClick(event)" />
							</mx:VBox>
						</mx:HBox>
					</mx:VBox>
				</mx:HBox>
				<mx:HBox height="50%">
					<mx:VBox verticalAlign="middle" height="100%">
						<mx:Button id="addSelectedToActiveButton" label="&gt;" width="50" click="onAddSelectedToActiveButtonClick(event)"/>
						<mx:Button id="addAllToActiveButton" label="&gt;&gt;" width="50" click="onAddAllToActiveButtonClick(event)"/>
					</mx:VBox>
					<mx:VBox height="100%" verticalGap="3">
						<mx:Label text="Active Enzymes:" />
						<mx:List id="activeEnzymesList" dataProvider="{ activeEnzymes }" labelField="name" allowMultipleSelection="true" height="100%"/>
					</mx:VBox>
					<mx:VBox verticalAlign="middle" height="100%">
						<mx:Button id="saveAsGroupButton" label="Save as Group" width="120" click="onSaveAsGroupButtonClick(event)"/>
						<mx:Button id="removeSelectedEnzymesFromActiveButton" label="Remove Enzyme" width="120" click="onRemoveSelectedEnzymesFromActiveGroupButtonClick(event)"/>
					</mx:VBox>
				</mx:HBox>
			</mx:VBox>
		</mx:HBox>
	</mx:VBox>
</AbstractDialogForm>
