<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" minWidth="955" minHeight="600">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.rpc.AsyncResponder;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import services.registryapi.RegistryAPI;
			
			import valueObjects.BlastResult;
			import valueObjects.DnaFeature;
			import valueObjects.FeaturedDNASequence;
			import valueObjects.Name;
			import valueObjects.PartNumber;
			import valueObjects.SearchResult;
			
			private var sessionId:String;
			
			private function onLoginButtonClick(event:MouseEvent):void
			{
				logMessage("Trying to login...");
				
				var registryApi:RegistryAPI = new RegistryAPI();
				var asyncToken:AsyncToken = registryApi.login(usernameTextInput.text, userpasswordTextInput.text);
				
				asyncToken.addResponder(new AsyncResponder(onLoginResult, onRegistryApiFault));
			}
			
			private function onLoginResult(event:ResultEvent, token:Object):void {
				sessionId = event.result as String;
				
				logoutButton.enabled = true;
				loginButton.enabled = false;
				usernameTextInput.enabled = false;
				userpasswordTextInput.enabled = false;
				
				statusLabel.text = "Welcome!";
				
				logMessage("User logged in: " + sessionId);
			}
			
			private function onLogoutButtonClick(event:MouseEvent):void
			{
				logMessage("Trying to logout...");
				
				var registryApi:RegistryAPI = new RegistryAPI();
				var asyncToken:AsyncToken = registryApi.logout(sessionId);
				
				asyncToken.addResponder(new AsyncResponder(onLogoutResult, onRegistryApiFault));
			}
			
			private function onLogoutResult(event:ResultEvent, token:Object):void {
				logoutButton.enabled = false;
				loginButton.enabled = true;
				usernameTextInput.enabled = true;
				userpasswordTextInput.enabled = true;
				
				statusLabel.text = "";
				
				logMessage("User: " + sessionId + " logged out successfully!");
			}
			
			private function onSearchButtonClick(event:MouseEvent):void {
				logMessage("Searching for '" + searchTextInput.text + "' ...");
				
				var registryApi:RegistryAPI = new RegistryAPI();
				var asyncToken:AsyncToken = registryApi.search(sessionId, searchTextInput.text);
				
				asyncToken.addResponder(new AsyncResponder(onSearchResult, onRegistryApiFault));
			}
			
			private function onSearchResult(event:ResultEvent, token:Object):void {
				var searchResults:ArrayCollection = event.result as ArrayCollection;
				
				if(searchResults && searchResults.length > 0) {
					var resultsDataProvider:ArrayCollection = new ArrayCollection();
					
					for(var i:int = 0; i < searchResults.length; i++) {
						var searchResult:SearchResult = searchResults[i];
						
						resultsDataProvider.addItem(
							{
								"index" : i + 1,
								"id" : searchResult.entry.recordId,
								"score" : searchResult.score,
								"partNumber" : (searchResult.entry.partNumbers.length > 0 ? (searchResult.entry.partNumbers.getItemAt(0) as PartNumber).partNumber : ""),
								"name" : (searchResult.entry.names.length > 0 ? (searchResult.entry.names.getItemAt(0) as Name).name : "")
							}
						);
					}
					
					searchDataGrid.dataProvider = resultsDataProvider;
					
					logMessage("Found: " + searchResults.length);
				} else {
					searchDataGrid.dataProvider = new ArrayCollection();
					
					logMessage("No entries found!");
				}
			}
			
			private function onBlastButtonClick(event:MouseEvent):void
			{
				logMessage("Blasting for '" + blastTextArea.text + "' ...");
				
				var registryApi:RegistryAPI = new RegistryAPI();
				
				var asyncToken:AsyncToken;
				
				if(programComboBox.selectedItem.value == "tblastx") {
					asyncToken = registryApi.tblastx(sessionId, blastTextArea.text);
				} else {
					asyncToken = registryApi.blastn(sessionId, blastTextArea.text);
				}
				
				asyncToken.addResponder(new AsyncResponder(onBlastResult, onRegistryApiFault));
			}
			
			private function onBlastResult(event:ResultEvent, token:Object):void {
				var blastResults:ArrayCollection = event.result as ArrayCollection;
				
				if(blastResults && blastResults.length > 0) {
					var resultsDataProvider:ArrayCollection = new ArrayCollection();
					
					for(var i:int = 0; i < blastResults.length; i++) {
						var blastResult:BlastResult = blastResults[i];
						
						resultsDataProvider.addItem(
							{
								"index" : i + 1,
								"id" : blastResult.entry.recordId,
								"score" : blastResult.score,
								"partNumber" : (blastResult.entry.partNumbers.length > 0 ? (blastResult.entry.partNumbers.getItemAt(0) as PartNumber).partNumber : ""),
								"name" : (blastResult.entry.names.length > 0 ? (blastResult.entry.names.getItemAt(0) as Name).name : "")
							}
						);
					}
					
					blastDataGrid.dataProvider = resultsDataProvider;
					
					logMessage("Found: " + blastResults.length);
				} else {
					blastDataGrid.dataProvider = new ArrayCollection();
					
					logMessage("No entries found!");
				}
			}
			
			private function onGetSequenceButtonClick(event:MouseEvent):void
			{
				logMessage("Getting sequence for '" + entryIdTextInput.text + "' ...");
				
				sequenceTextArea.text = "";
				
				var registryApi:RegistryAPI = new RegistryAPI();
				
				var asyncToken:AsyncToken = registryApi.getSequence(sessionId, entryIdTextInput.text);
				
				asyncToken.addResponder(new AsyncResponder(onGetSequenceResult, onRegistryApiFault));
			}
			
			private function onGetSequenceResult(event:ResultEvent, token:Object):void
			{
				if(event.result == null) {
					logMessage("No sequence found!");
					
					return;
				}
				
				var featuredDNASequence:FeaturedDNASequence = event.result as FeaturedDNASequence;
				
				sequenceTextArea.text += featuredDNASequence.sequence;
				
				if(featuredDNASequence.features && featuredDNASequence.features.length > 0) {
					for(var i:int = 0; i < featuredDNASequence.features.length; i++) {
						var dnaFeature:DnaFeature = featuredDNASequence.features[i] as DnaFeature;
						
						if(!dnaFeature) {
							continue;
						}
						
						sequenceTextArea.text += dnaFeature.start + " - " + dnaFeature.end + "; " + dnaFeature.type + "; " + dnaFeature.name;
						sequenceTextArea.text += "\n";
					}
				}
			}
			
			private function onRegistryApiFault(event:FaultEvent, token:Object):void {
				Alert.show("Registry action failed!\n" + event.fault.faultString);
				
				logMessage(event.fault.faultString);
			}
			
			private function logMessage(message:String):void
			{
				loggerTextArea.text += message + "\n";
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<mx:VDividedBox height="100%" width="100%" paddingTop="10" paddingBottom="10" paddingLeft="5" paddingRight="5">
		<mx:VBox width="100%" height="100%">
			<mx:HBox width="100%">
				<s:TextInput id="usernameTextInput" />
				<s:TextInput id="userpasswordTextInput" displayAsPassword="true" />
				<s:Button id="loginButton" label="Login" click="onLoginButtonClick(event)"/>
				<mx:Spacer width="100%" />
				<s:Label id="statusLabel"/>
				<mx:Spacer width="100%" />
				<s:Button id="logoutButton" enabled="false" label="Logout" click="onLogoutButtonClick(event)"/>
			</mx:HBox>
			<mx:HRule width="100%" strokeWidth="1" strokeColor="0xAAB3B3" shadowColor="0xAAB3B3"/>
			<mx:VBox width="100%">
				<mx:HBox width="100%">
					<s:TextInput id="searchTextInput" width="40%"/>
					<s:Button id="searchButton" label="Search" click="onSearchButtonClick(event)"/>
				</mx:HBox>
				<mx:DataGrid id="searchDataGrid" width="100%" editable="true">
					<mx:columns>
						<mx:DataGridColumn headerText="#" dataField="index" width="45" editable="false"/>
						<mx:DataGridColumn headerText="ID" dataField="id" editable="true"/>
						<mx:DataGridColumn headerText="Score" dataField="score" editable="false"/>
						<mx:DataGridColumn headerText="Part Number" dataField="partNumber" editable="true"/>
						<mx:DataGridColumn headerText="Name" dataField="name" editable="true"/>
					</mx:columns>
				</mx:DataGrid>
			</mx:VBox>
			<mx:HRule width="100%" strokeWidth="1" strokeColor="0xAAB3B3" shadowColor="0xAAB3B3"/>
			<mx:VBox width="100%">
				<mx:HBox width="100%">
					<s:TextArea id="blastTextArea" width="40%" height="50"/>
					<s:ComboBox id="programComboBox" labelField="text" width="200" selectedIndex="0">
						<s:dataProvider>
							<mx:ArrayList>
								<fx:Object value="blastn" text="blastn (nucleotide search)"/>
								<fx:Object value="tblastx" text="tblastx (translated search)"/>
							</mx:ArrayList>
						</s:dataProvider>
					</s:ComboBox>
					<s:Button id="blastButton" label="Blast" click="onBlastButtonClick(event)"/>
				</mx:HBox>
				<mx:DataGrid id="blastDataGrid" width="100%" editable="true">
					<mx:columns>
						<mx:DataGridColumn headerText="#" dataField="index" width="45" editable="false"/>
						<mx:DataGridColumn headerText="ID" dataField="id" editable="true"/>
						<mx:DataGridColumn headerText="Score" dataField="score" editable="false"/>
						<mx:DataGridColumn headerText="Part Number" dataField="partNumber" editable="true"/>
						<mx:DataGridColumn headerText="Name" dataField="name" editable="true"/>
					</mx:columns>
				</mx:DataGrid>
			</mx:VBox>
			<mx:HRule width="100%" strokeWidth="1" strokeColor="0xAAB3B3" shadowColor="0xAAB3B3"/>
			<mx:VBox width="100%" height="100%">
				<mx:HBox width="100%">
					<s:TextInput id="entryIdTextInput" width="40%"/>
					<s:Button id="getSequenceButton" label="Get Sequence By EntryId" click="onGetSequenceButtonClick(event)"/>
				</mx:HBox>
				<mx:TextArea id="sequenceTextArea" width="100%" height="100%"/>
			</mx:VBox>
		</mx:VBox>
		<s:TextArea id="loggerTextArea" height="100" width="100%"/>
	</mx:VDividedBox>
</s:Application>
